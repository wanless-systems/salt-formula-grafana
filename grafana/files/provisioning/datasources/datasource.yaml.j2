{%- from "grafana/map.jinja" import server with context %}
# # config file version
apiVersion: 1

# # list of datasources to insert/update depending
# # on what's available in the database
datasources:
    {%- for datasource in salt['pillar.get']('grafana:server:provisioning:datasources', []) %}
    -
        name: {{ datasource.name }}
        type: {{ datasource.datatype }}
        access: {{ datasource.get('access', 'proxy') }}
        orgId: {{ datasource.get('orgId', 1) }}
        url: {{ datasource.get('url') }}
        #   # <string> database password, if used
        password: {{ datasource.get('password', '') }}
        #   # <string> database user, if used
        user: {{ datasource.get('user', '') }}
        #   # <string> database name, if used
        database: {{ datasource.get('database') }}
        #   # <bool> enable/disable basic auth
        basicAuth: {{ datasource.get('basicAuth') }}
        #   # <string> basic auth username
        basicAuthUser: {{ datasource.get('basicAuthUser') }}
        #   # <string> basic auth password
        basicAuthPassword: {{ datasource.get('basicAuthPassword') }}
        #   # <bool> enable/disable with credentials headers
        withCredentials: {{ datasource.get('withCredentials') }}
        #   # <bool> mark as default datasource. Max one per org
        isDefault: {{ datasource.get('isDefault', false) }}
        #   # <map> fields that will be converted to json and stored in json_data
        #   jsonData:
        #      graphiteVersion: "1.1"
        #      tlsAuth: true
        #      tlsAuthWithCACert: true
        #      httpHeaderName1: "Authorization"
        #   # <string> json object of data that will be encrypted.
        #   secureJsonData:
        #     tlsCACert: "..."
        #     tlsClientCert: "..."
        #     tlsClientKey: "..."
        #     # <openshift\kubernetes token example>
        #     httpHeaderValue1: "Bearer xf5yhfkpsnmgo"
        version: {{ datasource.get('version', 1) }}
        #   # <bool> allow users to edit datasources from the UI.
        editable: {{ datasource.get('editable', false) }}

    {%- endfor %}
